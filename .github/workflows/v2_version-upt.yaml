name: Auto-update Terragrunt modules (per-module PRs)

on:
  workflow_dispatch:

jobs:
  update-modules:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Git
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"

      - name: Find unique module names
        id: modules
        run: |
          modules=$(grep -rohE 'ref=([a-zA-Z0-9_-]+)-v[0-9.]+' . --include="terragrunt.hcl" \
            | sed -E 's/ref=([a-zA-Z0-9_-]+)-v[0-9.]+/\1/' | sort -u)
          echo "$modules" > modules.txt
          echo "modules<<EOF" >> $GITHUB_OUTPUT
          echo "$modules" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Update module versions and create PRs
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          while read module_name; do
            echo "üîÑ Checking updates for module: $module_name"

            # Find one sample source line for the module
            source_line=$(grep -Er "ref=${module_name}-v[0-9.]+" . --include="terragrunt.hcl" | head -n1)
            if [[ -z "$source_line" ]]; then
              echo "‚ö†Ô∏è No usage found for $module_name"
              continue
            fi

            # Extract the full source URL from the HCL line
            full_source=$(echo "$source_line" | sed -E 's/.*source *= *"git::([^"]+)".*/\1/')
            repo_url=$(echo "$full_source" | cut -d'?' -f1 | sed -E 's|(//.*)||')  # removes subdir, keeps base repo
            repo_url=$(echo "$repo_url" | sed 's|/modules/.*||')                  # in case subfolder is included

            echo "üåê Repo: $repo_url"

            # Extract the actual Git URL
            git_url=$(echo "$repo_url" | sed 's|^git::||')

            # Get latest matching tag for this module
            latest_tag=$(git ls-remote --tags "$git_url" \
              | grep "refs/tags/${module_name}-v" \
              | sed 's|.*refs/tags/||' \
              | sort -V \
              | tail -n1)

            if [[ -z "$latest_tag" ]]; then
              echo "‚ùå No tags found for $module_name in $git_url"
              continue
            fi

            echo "üÜï Latest tag: $latest_tag"

            branch="update/${module_name}-module"
            git checkout -b "$branch"

            changed=false

            find . -name "terragrunt.hcl" | while read file; do
              if grep -q "ref=${module_name}-v" "$file"; then
                current_ref=$(grep -o "ref=${module_name}-v[0-9.]*" "$file" | head -n1)
                if [[ "$current_ref" != "ref=$latest_tag" ]]; then
                  echo "üì¶ Updating $file"
                  sed -i "s|$current_ref|ref=$latest_tag|g" "$file"
                  changed=true
                fi
              fi
            done

            if [[ "$changed" = true ]]; then
              git add .
              git commit -m "chore: bump $module_name module to $latest_tag"
              git push -f origin "$branch"

              gh pr create \
                --title "Update $module_name module to $latest_tag" \
                --body "This PR updates the $module_name module to \`$latest_tag\`." \
                --head "$branch" \
                --base main
            else
              echo "‚úÖ $module_name already at latest version"
              git checkout main
              git branch -D "$branch"
            fi

          done < modules.txt
