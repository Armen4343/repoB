name: Auto-update Terragrunt modules (separate PRs)

on:
  workflow_dispatch:

jobs:
  update-modules:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Git
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"

      - name: Get list of modules in use
        id: modules
        run: |
          modules=$(grep -rohE 'ref=([a-zA-Z0-9_-]+)-v[0-9.]+' . --include="terragrunt.hcl" \
            | sed -E 's/ref=([a-zA-Z0-9_-]+)-v[0-9.]+/\1/' | sort -u)
          echo "$modules" > modules.txt
          echo "modules<<EOF" >> $GITHUB_OUTPUT
          echo "$modules" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Loop and create PRs per module
        run: |
          while read module_name; do
            echo "üîÑ Checking updates for module: $module_name"

            # Get latest tag for this module from source repo
            latest_tag=$(git ls-remote --tags https://github.com/Armen4343/repoA.git \
              | grep "refs/tags/${module_name}-v" \
              | sed 's|.*refs/tags/||' \
              | sort -V \
              | tail -n1)

            if [ -z "$latest_tag" ]; then
              echo "‚ùå No tags found for $module_name"
              continue
            fi

            echo "üÜï Latest tag: $latest_tag"

            # Clone clean branch
            git checkout -b "update/${module_name}-module"

            changed=false

            # Find and update relevant terragrunt.hcl files
            find . -name "terragrunt.hcl" | while read file; do
              current_line=$(grep -E "ref=${module_name}-v[0-9.]+" "$file" || true)
              if [[ -n "$current_line" ]]; then
                current_tag=$(echo "$current_line" | sed -E 's/.*ref=([^"]+)".*/\1/')
                if [[ "$current_tag" != "$latest_tag" ]]; then
                  echo "üì¶ Updating $file from $current_tag to $latest_tag"
                  sed -i "s|ref=$current_tag|ref=$latest_tag|g" "$file"
                  changed=true
                fi
              fi
            done

            if [[ "$changed" = true ]]; then
              git add .
              git commit -m "chore: bump $module_name module to $latest_tag"
              git push -f origin "update/${module_name}-module"

              gh pr create \
                --title "Update $module_name module to $latest_tag" \
                --body "This PR bumps the $module_name module to \`$latest_tag\`." \
                --head "update/${module_name}-module" \
                --base main
            else
              echo "‚úÖ $module_name already at latest version"
              git checkout main
              git branch -D "update/${module_name}-module"
            fi

          done < modules.txt
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
